/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package socialite.rpc.query;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-26")
public class QueryService {

  public interface Iface {

    public void gc() throws TQueryError, org.apache.thrift.TException;

    public void runSimple(QueryMessage query) throws TQueryError, org.apache.thrift.TException;

    public void run(QueryMessage query, String addr, int port, long queryid)
        throws TQueryError, org.apache.thrift.TException;

    public socialite.rpc.TTuple getFirstTuple(QueryMessage query)
        throws TQueryError, org.apache.thrift.TException;

    public void clear(String table) throws TQueryError, org.apache.thrift.TException;

    public void drop(String table) throws TQueryError, org.apache.thrift.TException;

    public String getEnumKey(String kind, int id) throws TQueryError, org.apache.thrift.TException;

    public int getEnumId(String kind, String key) throws TQueryError, org.apache.thrift.TException;

    public List<String> getEnumKeyList(String kind)
        throws TQueryError, org.apache.thrift.TException;
  }

  public interface AsyncIface {

    public void gc(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void runSimple(
        QueryMessage query, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void run(
        QueryMessage query,
        String addr,
        int port,
        long queryid,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getFirstTuple(
        QueryMessage query, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void clear(String table, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void drop(String table, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getEnumKey(
        String kind, int id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getEnumId(
        String kind, String key, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;

    public void getEnumKeyList(
        String kind, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(
          org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(
        org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void gc() throws TQueryError, org.apache.thrift.TException {
      send_gc();
      recv_gc();
    }

    public void send_gc() throws org.apache.thrift.TException {
      gc_args args = new gc_args();
      sendBase("gc", args);
    }

    public void recv_gc() throws TQueryError, org.apache.thrift.TException {
      gc_result result = new gc_result();
      receiveBase(result, "gc");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void runSimple(QueryMessage query) throws TQueryError, org.apache.thrift.TException {
      send_runSimple(query);
      recv_runSimple();
    }

    public void send_runSimple(QueryMessage query) throws org.apache.thrift.TException {
      runSimple_args args = new runSimple_args();
      args.setQuery(query);
      sendBase("runSimple", args);
    }

    public void recv_runSimple() throws TQueryError, org.apache.thrift.TException {
      runSimple_result result = new runSimple_result();
      receiveBase(result, "runSimple");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void run(QueryMessage query, String addr, int port, long queryid)
        throws TQueryError, org.apache.thrift.TException {
      send_run(query, addr, port, queryid);
      recv_run();
    }

    public void send_run(QueryMessage query, String addr, int port, long queryid)
        throws org.apache.thrift.TException {
      run_args args = new run_args();
      args.setQuery(query);
      args.setAddr(addr);
      args.setPort(port);
      args.setQueryid(queryid);
      sendBase("run", args);
    }

    public void recv_run() throws TQueryError, org.apache.thrift.TException {
      run_result result = new run_result();
      receiveBase(result, "run");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public socialite.rpc.TTuple getFirstTuple(QueryMessage query)
        throws TQueryError, org.apache.thrift.TException {
      send_getFirstTuple(query);
      return recv_getFirstTuple();
    }

    public void send_getFirstTuple(QueryMessage query) throws org.apache.thrift.TException {
      getFirstTuple_args args = new getFirstTuple_args();
      args.setQuery(query);
      sendBase("getFirstTuple", args);
    }

    public socialite.rpc.TTuple recv_getFirstTuple()
        throws TQueryError, org.apache.thrift.TException {
      getFirstTuple_result result = new getFirstTuple_result();
      receiveBase(result, "getFirstTuple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getFirstTuple failed: unknown result");
    }

    public void clear(String table) throws TQueryError, org.apache.thrift.TException {
      send_clear(table);
      recv_clear();
    }

    public void send_clear(String table) throws org.apache.thrift.TException {
      clear_args args = new clear_args();
      args.setTable(table);
      sendBase("clear", args);
    }

    public void recv_clear() throws TQueryError, org.apache.thrift.TException {
      clear_result result = new clear_result();
      receiveBase(result, "clear");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void drop(String table) throws TQueryError, org.apache.thrift.TException {
      send_drop(table);
      recv_drop();
    }

    public void send_drop(String table) throws org.apache.thrift.TException {
      drop_args args = new drop_args();
      args.setTable(table);
      sendBase("drop", args);
    }

    public void recv_drop() throws TQueryError, org.apache.thrift.TException {
      drop_result result = new drop_result();
      receiveBase(result, "drop");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public String getEnumKey(String kind, int id) throws TQueryError, org.apache.thrift.TException {
      send_getEnumKey(kind, id);
      return recv_getEnumKey();
    }

    public void send_getEnumKey(String kind, int id) throws org.apache.thrift.TException {
      getEnumKey_args args = new getEnumKey_args();
      args.setKind(kind);
      args.setId(id);
      sendBase("getEnumKey", args);
    }

    public String recv_getEnumKey() throws TQueryError, org.apache.thrift.TException {
      getEnumKey_result result = new getEnumKey_result();
      receiveBase(result, "getEnumKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getEnumKey failed: unknown result");
    }

    public int getEnumId(String kind, String key) throws TQueryError, org.apache.thrift.TException {
      send_getEnumId(kind, key);
      return recv_getEnumId();
    }

    public void send_getEnumId(String kind, String key) throws org.apache.thrift.TException {
      getEnumId_args args = new getEnumId_args();
      args.setKind(kind);
      args.setKey(key);
      sendBase("getEnumId", args);
    }

    public int recv_getEnumId() throws TQueryError, org.apache.thrift.TException {
      getEnumId_result result = new getEnumId_result();
      receiveBase(result, "getEnumId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getEnumId failed: unknown result");
    }

    public List<String> getEnumKeyList(String kind)
        throws TQueryError, org.apache.thrift.TException {
      send_getEnumKeyList(kind);
      return recv_getEnumKeyList();
    }

    public void send_getEnumKeyList(String kind) throws org.apache.thrift.TException {
      getEnumKeyList_args args = new getEnumKeyList_args();
      args.setKind(kind);
      sendBase("getEnumKeyList", args);
    }

    public List<String> recv_getEnumKeyList() throws TQueryError, org.apache.thrift.TException {
      getEnumKeyList_result result = new getEnumKeyList_result();
      receiveBase(result, "getEnumKeyList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(
          org.apache.thrift.TApplicationException.MISSING_RESULT,
          "getEnumKeyList failed: unknown result");
    }
  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
      implements AsyncIface {
    public static class Factory
        implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(
          org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void gc(org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      gc_call method_call = new gc_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gc_call extends org.apache.thrift.async.TAsyncMethodCall {
      public gc_call(
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "gc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gc_args args = new gc_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_gc();
      }
    }

    public void runSimple(
        QueryMessage query, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      runSimple_call method_call =
          new runSimple_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runSimple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private QueryMessage query;

      public runSimple_call(
          QueryMessage query,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "runSimple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runSimple_args args = new runSimple_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_runSimple();
      }
    }

    public void run(
        QueryMessage query,
        String addr,
        int port,
        long queryid,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      run_call method_call =
          new run_call(
              query, addr, port, queryid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class run_call extends org.apache.thrift.async.TAsyncMethodCall {
      private QueryMessage query;
      private String addr;
      private int port;
      private long queryid;

      public run_call(
          QueryMessage query,
          String addr,
          int port,
          long queryid,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.addr = addr;
        this.port = port;
        this.queryid = queryid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "run", org.apache.thrift.protocol.TMessageType.CALL, 0));
        run_args args = new run_args();
        args.setQuery(query);
        args.setAddr(addr);
        args.setPort(port);
        args.setQueryid(queryid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_run();
      }
    }

    public void getFirstTuple(
        QueryMessage query, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getFirstTuple_call method_call =
          new getFirstTuple_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFirstTuple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private QueryMessage query;

      public getFirstTuple_call(
          QueryMessage query,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "getFirstTuple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFirstTuple_args args = new getFirstTuple_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public socialite.rpc.TTuple getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFirstTuple();
      }
    }

    public void clear(String table, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      clear_call method_call =
          new clear_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clear_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;

      public clear_call(
          String table,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "clear", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clear_args args = new clear_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clear();
      }
    }

    public void drop(String table, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      drop_call method_call =
          new drop_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;

      public drop_call(
          String table,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "drop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drop_args args = new drop_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_drop();
      }
    }

    public void getEnumKey(
        String kind, int id, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getEnumKey_call method_call =
          new getEnumKey_call(kind, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnumKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String kind;
      private int id;

      public getEnumKey_call(
          String kind,
          int id,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kind = kind;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "getEnumKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnumKey_args args = new getEnumKey_args();
        args.setKind(kind);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnumKey();
      }
    }

    public void getEnumId(
        String kind, String key, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getEnumId_call method_call =
          new getEnumId_call(kind, key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnumId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String kind;
      private String key;

      public getEnumId_call(
          String kind,
          String key,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kind = kind;
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "getEnumId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnumId_args args = new getEnumId_args();
        args.setKind(kind);
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnumId();
      }
    }

    public void getEnumKeyList(
        String kind, org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      getEnumKeyList_call method_call =
          new getEnumKeyList_call(kind, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEnumKeyList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String kind;

      public getEnumKeyList_call(
          String kind,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kind = kind;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "getEnumKeyList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEnumKeyList_args args = new getEnumKeyList_args();
        args.setKind(kind);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TQueryError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEnumKeyList();
      }
    }
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(
          iface,
          getProcessMap(
              new HashMap<
                  String,
                  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface>
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            getProcessMap(
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
                    processMap) {
      processMap.put("gc", new gc());
      processMap.put("runSimple", new runSimple());
      processMap.put("run", new run());
      processMap.put("getFirstTuple", new getFirstTuple());
      processMap.put("clear", new clear());
      processMap.put("drop", new drop());
      processMap.put("getEnumKey", new getEnumKey());
      processMap.put("getEnumId", new getEnumId());
      processMap.put("getEnumKeyList", new getEnumKeyList());
      return processMap;
    }

    public static class gc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gc_args> {
      public gc() {
        super("gc");
      }

      public gc_args getEmptyArgsInstance() {
        return new gc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gc_result getResult(I iface, gc_args args) throws org.apache.thrift.TException {
        gc_result result = new gc_result();
        try {
          iface.gc();
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class runSimple<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, runSimple_args> {
      public runSimple() {
        super("runSimple");
      }

      public runSimple_args getEmptyArgsInstance() {
        return new runSimple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public runSimple_result getResult(I iface, runSimple_args args)
          throws org.apache.thrift.TException {
        runSimple_result result = new runSimple_result();
        try {
          iface.runSimple(args.query);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class run<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, run_args> {
      public run() {
        super("run");
      }

      public run_args getEmptyArgsInstance() {
        return new run_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public run_result getResult(I iface, run_args args) throws org.apache.thrift.TException {
        run_result result = new run_result();
        try {
          iface.run(args.query, args.addr, args.port, args.queryid);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getFirstTuple<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, getFirstTuple_args> {
      public getFirstTuple() {
        super("getFirstTuple");
      }

      public getFirstTuple_args getEmptyArgsInstance() {
        return new getFirstTuple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFirstTuple_result getResult(I iface, getFirstTuple_args args)
          throws org.apache.thrift.TException {
        getFirstTuple_result result = new getFirstTuple_result();
        try {
          result.success = iface.getFirstTuple(args.query);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class clear<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, clear_args> {
      public clear() {
        super("clear");
      }

      public clear_args getEmptyArgsInstance() {
        return new clear_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clear_result getResult(I iface, clear_args args) throws org.apache.thrift.TException {
        clear_result result = new clear_result();
        try {
          iface.clear(args.table);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class drop<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, drop_args> {
      public drop() {
        super("drop");
      }

      public drop_args getEmptyArgsInstance() {
        return new drop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public drop_result getResult(I iface, drop_args args) throws org.apache.thrift.TException {
        drop_result result = new drop_result();
        try {
          iface.drop(args.table);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getEnumKey<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, getEnumKey_args> {
      public getEnumKey() {
        super("getEnumKey");
      }

      public getEnumKey_args getEmptyArgsInstance() {
        return new getEnumKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEnumKey_result getResult(I iface, getEnumKey_args args)
          throws org.apache.thrift.TException {
        getEnumKey_result result = new getEnumKey_result();
        try {
          result.success = iface.getEnumKey(args.kind, args.id);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getEnumId<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, getEnumId_args> {
      public getEnumId() {
        super("getEnumId");
      }

      public getEnumId_args getEmptyArgsInstance() {
        return new getEnumId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEnumId_result getResult(I iface, getEnumId_args args)
          throws org.apache.thrift.TException {
        getEnumId_result result = new getEnumId_result();
        try {
          result.success = iface.getEnumId(args.kind, args.key);
          result.setSuccessIsSet(true);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getEnumKeyList<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, getEnumKeyList_args> {
      public getEnumKeyList() {
        super("getEnumKeyList");
      }

      public getEnumKeyList_args getEmptyArgsInstance() {
        return new getEnumKeyList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEnumKeyList_result getResult(I iface, getEnumKeyList_args args)
          throws org.apache.thrift.TException {
        getEnumKeyList_result result = new getEnumKeyList_result();
        try {
          result.success = iface.getEnumKeyList(args.kind);
        } catch (TQueryError err) {
          result.err = err;
        }
        return result;
      }
    }
  }

  public static class AsyncProcessor<I extends AsyncIface>
      extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(
          iface,
          getProcessMap(
              new HashMap<
                  String,
                  org.apache.thrift.AsyncProcessFunction<
                      I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(
        I iface,
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface>
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            getProcessMap(
                Map<
                        String,
                        org.apache.thrift.AsyncProcessFunction<
                            I, ? extends org.apache.thrift.TBase, ?>>
                    processMap) {
      processMap.put("gc", new gc());
      processMap.put("runSimple", new runSimple());
      processMap.put("run", new run());
      processMap.put("getFirstTuple", new getFirstTuple());
      processMap.put("clear", new clear());
      processMap.put("drop", new drop());
      processMap.put("getEnumKey", new getEnumKey());
      processMap.put("getEnumId", new getEnumId());
      processMap.put("getEnumKeyList", new getEnumKeyList());
      return processMap;
    }

    public static class gc<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, gc_args, Void> {
      public gc() {
        super("gc");
      }

      public gc_args getEmptyArgsInstance() {
        return new gc_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            gc_result result = new gc_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gc_result result = new gc_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface, gc_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.gc(resultHandler);
      }
    }

    public static class runSimple<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, runSimple_args, Void> {
      public runSimple() {
        super("runSimple");
      }

      public runSimple_args getEmptyArgsInstance() {
        return new runSimple_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            runSimple_result result = new runSimple_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            runSimple_result result = new runSimple_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          runSimple_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.runSimple(args.query, resultHandler);
      }
    }

    public static class run<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, run_args, Void> {
      public run() {
        super("run");
      }

      public run_args getEmptyArgsInstance() {
        return new run_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            run_result result = new run_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            run_result result = new run_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface, run_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.run(args.query, args.addr, args.port, args.queryid, resultHandler);
      }
    }

    public static class getFirstTuple<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<
            I, getFirstTuple_args, socialite.rpc.TTuple> {
      public getFirstTuple() {
        super("getFirstTuple");
      }

      public getFirstTuple_args getEmptyArgsInstance() {
        return new getFirstTuple_args();
      }

      public AsyncMethodCallback<socialite.rpc.TTuple> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<socialite.rpc.TTuple>() {
          public void onComplete(socialite.rpc.TTuple o) {
            getFirstTuple_result result = new getFirstTuple_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFirstTuple_result result = new getFirstTuple_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          getFirstTuple_args args,
          org.apache.thrift.async.AsyncMethodCallback<socialite.rpc.TTuple> resultHandler)
          throws TException {
        iface.getFirstTuple(args.query, resultHandler);
      }
    }

    public static class clear<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, clear_args, Void> {
      public clear() {
        super("clear");
      }

      public clear_args getEmptyArgsInstance() {
        return new clear_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            clear_result result = new clear_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clear_result result = new clear_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface, clear_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.clear(args.table, resultHandler);
      }
    }

    public static class drop<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, drop_args, Void> {
      public drop() {
        super("drop");
      }

      public drop_args getEmptyArgsInstance() {
        return new drop_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            drop_result result = new drop_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            drop_result result = new drop_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface, drop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.drop(args.table, resultHandler);
      }
    }

    public static class getEnumKey<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getEnumKey_args, String> {
      public getEnumKey() {
        super("getEnumKey");
      }

      public getEnumKey_args getEmptyArgsInstance() {
        return new getEnumKey_args();
      }

      public AsyncMethodCallback<String> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            getEnumKey_result result = new getEnumKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEnumKey_result result = new getEnumKey_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          getEnumKey_args args,
          org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
          throws TException {
        iface.getEnumKey(args.kind, args.id, resultHandler);
      }
    }

    public static class getEnumId<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getEnumId_args, Integer> {
      public getEnumId() {
        super("getEnumId");
      }

      public getEnumId_args getEmptyArgsInstance() {
        return new getEnumId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            getEnumId_result result = new getEnumId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEnumId_result result = new getEnumId_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          getEnumId_args args,
          org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler)
          throws TException {
        iface.getEnumId(args.kind, args.key, resultHandler);
      }
    }

    public static class getEnumKeyList<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, getEnumKeyList_args, List<String>> {
      public getEnumKeyList() {
        super("getEnumKeyList");
      }

      public getEnumKeyList_args getEmptyArgsInstance() {
        return new getEnumKeyList_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() {
          public void onComplete(List<String> o) {
            getEnumKeyList_result result = new getEnumKeyList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEnumKeyList_result result = new getEnumKeyList_result();
            if (e instanceof TQueryError) {
              result.err = (TQueryError) e;
              result.setErrIsSet(true);
              msg = result;
            } else {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          getEnumKeyList_args args,
          org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler)
          throws TException {
        iface.getEnumKeyList(args.kind, resultHandler);
      }
    }
  }

  public static class gc_args
      implements org.apache.thrift.TBase<gc_args, gc_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<gc_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("gc_args");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new gc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gc_argsTupleSchemeFactory());
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gc_args.class, metaDataMap);
    }

    public gc_args() {}

    /** Performs a deep copy on <i>other</i>. */
    public gc_args(gc_args other) {}

    public gc_args deepCopy() {
      return new gc_args(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof gc_args) return this.equals((gc_args) that);
      return false;
    }

    public boolean equals(gc_args that) {
      if (that == null) return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(gc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gc_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gc_argsStandardSchemeFactory implements SchemeFactory {
      public gc_argsStandardScheme getScheme() {
        return new gc_argsStandardScheme();
      }
    }

    private static class gc_argsStandardScheme extends StandardScheme<gc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gc_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gc_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class gc_argsTupleSchemeFactory implements SchemeFactory {
      public gc_argsTupleScheme getScheme() {
        return new gc_argsTupleScheme();
      }
    }

    private static class gc_argsTupleScheme extends TupleScheme<gc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gc_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gc_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }
  }

  public static class gc_result
      implements org.apache.thrift.TBase<gc_result, gc_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<gc_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("gc_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new gc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gc_resultTupleSchemeFactory());
    }

    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gc_result.class, metaDataMap);
    }

    public gc_result() {}

    public gc_result(TQueryError err) {
      this();
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public gc_result(gc_result other) {
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public gc_result deepCopy() {
      return new gc_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public TQueryError getErr() {
      return this.err;
    }

    public gc_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof gc_result) return this.equals((gc_result) that);
      return false;
    }

    public boolean equals(gc_result that) {
      if (that == null) return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(gc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gc_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gc_resultStandardSchemeFactory implements SchemeFactory {
      public gc_resultStandardScheme getScheme() {
        return new gc_resultStandardScheme();
      }
    }

    private static class gc_resultStandardScheme extends StandardScheme<gc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gc_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gc_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class gc_resultTupleSchemeFactory implements SchemeFactory {
      public gc_resultTupleScheme getScheme() {
        return new gc_resultTupleScheme();
      }
    }

    private static class gc_resultTupleScheme extends TupleScheme<gc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gc_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gc_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class runSimple_args
      implements org.apache.thrift.TBase<runSimple_args, runSimple_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<runSimple_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("runSimple_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new runSimple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runSimple_argsTupleSchemeFactory());
    }

    public QueryMessage query; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.QUERY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "query",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, QueryMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          runSimple_args.class, metaDataMap);
    }

    public runSimple_args() {}

    public runSimple_args(QueryMessage query) {
      this();
      this.query = query;
    }

    /** Performs a deep copy on <i>other</i>. */
    public runSimple_args(runSimple_args other) {
      if (other.isSetQuery()) {
        this.query = new QueryMessage(other.query);
      }
    }

    public runSimple_args deepCopy() {
      return new runSimple_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public QueryMessage getQuery() {
      return this.query;
    }

    public runSimple_args setQuery(QueryMessage query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case QUERY:
          if (value == null) {
            unsetQuery();
          } else {
            setQuery((QueryMessage) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case QUERY:
          return getQuery();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case QUERY:
          return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof runSimple_args) return this.equals((runSimple_args) that);
      return false;
    }

    public boolean equals(runSimple_args that) {
      if (that == null) return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query)) return false;
        if (!this.query.equals(that.query)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query) list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(runSimple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runSimple_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runSimple_argsStandardSchemeFactory implements SchemeFactory {
      public runSimple_argsStandardScheme getScheme() {
        return new runSimple_argsStandardScheme();
      }
    }

    private static class runSimple_argsStandardScheme extends StandardScheme<runSimple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runSimple_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new QueryMessage();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runSimple_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class runSimple_argsTupleSchemeFactory implements SchemeFactory {
      public runSimple_argsTupleScheme getScheme() {
        return new runSimple_argsTupleScheme();
      }
    }

    private static class runSimple_argsTupleScheme extends TupleScheme<runSimple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runSimple_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runSimple_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new QueryMessage();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }
  }

  public static class runSimple_result
      implements org.apache.thrift.TBase<runSimple_result, runSimple_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<runSimple_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("runSimple_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new runSimple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runSimple_resultTupleSchemeFactory());
    }

    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          runSimple_result.class, metaDataMap);
    }

    public runSimple_result() {}

    public runSimple_result(TQueryError err) {
      this();
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public runSimple_result(runSimple_result other) {
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public runSimple_result deepCopy() {
      return new runSimple_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public TQueryError getErr() {
      return this.err;
    }

    public runSimple_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof runSimple_result) return this.equals((runSimple_result) that);
      return false;
    }

    public boolean equals(runSimple_result that) {
      if (that == null) return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(runSimple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runSimple_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runSimple_resultStandardSchemeFactory implements SchemeFactory {
      public runSimple_resultStandardScheme getScheme() {
        return new runSimple_resultStandardScheme();
      }
    }

    private static class runSimple_resultStandardScheme extends StandardScheme<runSimple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runSimple_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runSimple_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class runSimple_resultTupleSchemeFactory implements SchemeFactory {
      public runSimple_resultTupleScheme getScheme() {
        return new runSimple_resultTupleScheme();
      }
    }

    private static class runSimple_resultTupleScheme extends TupleScheme<runSimple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runSimple_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runSimple_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class run_args
      implements org.apache.thrift.TBase<run_args, run_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<run_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("run_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "addr", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "port", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField QUERYID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "queryid", org.apache.thrift.protocol.TType.I64, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new run_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_argsTupleSchemeFactory());
    }

    public QueryMessage query; // required
    public String addr; // required
    public int port; // required
    public long queryid; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query"),
      ADDR((short) 2, "addr"),
      PORT((short) 3, "port"),
      QUERYID((short) 4, "queryid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // ADDR
            return ADDR;
          case 3: // PORT
            return PORT;
          case 4: // QUERYID
            return QUERYID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __QUERYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.QUERY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "query",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, QueryMessage.class)));
      tmpMap.put(
          _Fields.ADDR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "addr",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(
          _Fields.PORT,
          new org.apache.thrift.meta_data.FieldMetaData(
              "port",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.QUERYID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "queryid",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_args.class, metaDataMap);
    }

    public run_args() {}

    public run_args(QueryMessage query, String addr, int port, long queryid) {
      this();
      this.query = query;
      this.addr = addr;
      this.port = port;
      setPortIsSet(true);
      this.queryid = queryid;
      setQueryidIsSet(true);
    }

    /** Performs a deep copy on <i>other</i>. */
    public run_args(run_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQuery()) {
        this.query = new QueryMessage(other.query);
      }
      if (other.isSetAddr()) {
        this.addr = other.addr;
      }
      this.port = other.port;
      this.queryid = other.queryid;
    }

    public run_args deepCopy() {
      return new run_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.addr = null;
      setPortIsSet(false);
      this.port = 0;
      setQueryidIsSet(false);
      this.queryid = 0;
    }

    public QueryMessage getQuery() {
      return this.query;
    }

    public run_args setQuery(QueryMessage query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public String getAddr() {
      return this.addr;
    }

    public run_args setAddr(String addr) {
      this.addr = addr;
      return this;
    }

    public void unsetAddr() {
      this.addr = null;
    }

    /** Returns true if field addr is set (has been assigned a value) and false otherwise */
    public boolean isSetAddr() {
      return this.addr != null;
    }

    public void setAddrIsSet(boolean value) {
      if (!value) {
        this.addr = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public run_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public long getQueryid() {
      return this.queryid;
    }

    public run_args setQueryid(long queryid) {
      this.queryid = queryid;
      setQueryidIsSet(true);
      return this;
    }

    public void unsetQueryid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    /** Returns true if field queryid is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryid() {
      return EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    public void setQueryidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case QUERY:
          if (value == null) {
            unsetQuery();
          } else {
            setQuery((QueryMessage) value);
          }
          break;

        case ADDR:
          if (value == null) {
            unsetAddr();
          } else {
            setAddr((String) value);
          }
          break;

        case PORT:
          if (value == null) {
            unsetPort();
          } else {
            setPort((Integer) value);
          }
          break;

        case QUERYID:
          if (value == null) {
            unsetQueryid();
          } else {
            setQueryid((Long) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case QUERY:
          return getQuery();

        case ADDR:
          return getAddr();

        case PORT:
          return getPort();

        case QUERYID:
          return getQueryid();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case QUERY:
          return isSetQuery();
        case ADDR:
          return isSetAddr();
        case PORT:
          return isSetPort();
        case QUERYID:
          return isSetQueryid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof run_args) return this.equals((run_args) that);
      return false;
    }

    public boolean equals(run_args that) {
      if (that == null) return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query)) return false;
        if (!this.query.equals(that.query)) return false;
      }

      boolean this_present_addr = true && this.isSetAddr();
      boolean that_present_addr = true && that.isSetAddr();
      if (this_present_addr || that_present_addr) {
        if (!(this_present_addr && that_present_addr)) return false;
        if (!this.addr.equals(that.addr)) return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port)) return false;
        if (this.port != that.port) return false;
      }

      boolean this_present_queryid = true;
      boolean that_present_queryid = true;
      if (this_present_queryid || that_present_queryid) {
        if (!(this_present_queryid && that_present_queryid)) return false;
        if (this.queryid != that.queryid) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query) list.add(query);

      boolean present_addr = true && (isSetAddr());
      list.add(present_addr);
      if (present_addr) list.add(addr);

      boolean present_port = true;
      list.add(present_port);
      if (present_port) list.add(port);

      boolean present_queryid = true;
      list.add(present_queryid);
      if (present_queryid) list.add(queryid);

      return list.hashCode();
    }

    @Override
    public int compareTo(run_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueryid()).compareTo(other.isSetQueryid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryid, other.queryid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addr:");
      if (this.addr == null) {
        sb.append("null");
      } else {
        sb.append(this.addr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queryid:");
      sb.append(this.queryid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_argsStandardSchemeFactory implements SchemeFactory {
      public run_argsStandardScheme getScheme() {
        return new run_argsStandardScheme();
      }
    }

    private static class run_argsStandardScheme extends StandardScheme<run_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new QueryMessage();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.addr = iprot.readString();
                struct.setAddrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUERYID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.queryid = iprot.readI64();
                struct.setQueryidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.addr != null) {
          oprot.writeFieldBegin(ADDR_FIELD_DESC);
          oprot.writeString(struct.addr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUERYID_FIELD_DESC);
        oprot.writeI64(struct.queryid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class run_argsTupleSchemeFactory implements SchemeFactory {
      public run_argsTupleScheme getScheme() {
        return new run_argsTupleScheme();
      }
    }

    private static class run_argsTupleScheme extends TupleScheme<run_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetAddr()) {
          optionals.set(1);
        }
        if (struct.isSetPort()) {
          optionals.set(2);
        }
        if (struct.isSetQueryid()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetAddr()) {
          oprot.writeString(struct.addr);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetQueryid()) {
          oprot.writeI64(struct.queryid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.query = new QueryMessage();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.addr = iprot.readString();
          struct.setAddrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.queryid = iprot.readI64();
          struct.setQueryidIsSet(true);
        }
      }
    }
  }

  public static class run_result
      implements org.apache.thrift.TBase<run_result, run_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<run_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("run_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new run_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_resultTupleSchemeFactory());
    }

    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_result.class, metaDataMap);
    }

    public run_result() {}

    public run_result(TQueryError err) {
      this();
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public run_result(run_result other) {
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public run_result deepCopy() {
      return new run_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public TQueryError getErr() {
      return this.err;
    }

    public run_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof run_result) return this.equals((run_result) that);
      return false;
    }

    public boolean equals(run_result that) {
      if (that == null) return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(run_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_resultStandardSchemeFactory implements SchemeFactory {
      public run_resultStandardScheme getScheme() {
        return new run_resultStandardScheme();
      }
    }

    private static class run_resultStandardScheme extends StandardScheme<run_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class run_resultTupleSchemeFactory implements SchemeFactory {
      public run_resultTupleScheme getScheme() {
        return new run_resultTupleScheme();
      }
    }

    private static class run_resultTupleScheme extends TupleScheme<run_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class getFirstTuple_args
      implements org.apache.thrift.TBase<getFirstTuple_args, getFirstTuple_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getFirstTuple_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getFirstTuple_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getFirstTuple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstTuple_argsTupleSchemeFactory());
    }

    public QueryMessage query; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short) 1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.QUERY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "query",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, QueryMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getFirstTuple_args.class, metaDataMap);
    }

    public getFirstTuple_args() {}

    public getFirstTuple_args(QueryMessage query) {
      this();
      this.query = query;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getFirstTuple_args(getFirstTuple_args other) {
      if (other.isSetQuery()) {
        this.query = new QueryMessage(other.query);
      }
    }

    public getFirstTuple_args deepCopy() {
      return new getFirstTuple_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public QueryMessage getQuery() {
      return this.query;
    }

    public getFirstTuple_args setQuery(QueryMessage query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case QUERY:
          if (value == null) {
            unsetQuery();
          } else {
            setQuery((QueryMessage) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case QUERY:
          return getQuery();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case QUERY:
          return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getFirstTuple_args) return this.equals((getFirstTuple_args) that);
      return false;
    }

    public boolean equals(getFirstTuple_args that) {
      if (that == null) return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query)) return false;
        if (!this.query.equals(that.query)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query) list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFirstTuple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstTuple_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstTuple_argsStandardSchemeFactory implements SchemeFactory {
      public getFirstTuple_argsStandardScheme getScheme() {
        return new getFirstTuple_argsStandardScheme();
      }
    }

    private static class getFirstTuple_argsStandardScheme
        extends StandardScheme<getFirstTuple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstTuple_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new QueryMessage();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstTuple_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getFirstTuple_argsTupleSchemeFactory implements SchemeFactory {
      public getFirstTuple_argsTupleScheme getScheme() {
        return new getFirstTuple_argsTupleScheme();
      }
    }

    private static class getFirstTuple_argsTupleScheme extends TupleScheme<getFirstTuple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstTuple_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstTuple_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new QueryMessage();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }
  }

  public static class getFirstTuple_result
      implements org.apache.thrift.TBase<getFirstTuple_result, getFirstTuple_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getFirstTuple_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getFirstTuple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getFirstTuple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstTuple_resultTupleSchemeFactory());
    }

    public socialite.rpc.TTuple success; // required
    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"),
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, socialite.rpc.TTuple.class)));
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getFirstTuple_result.class, metaDataMap);
    }

    public getFirstTuple_result() {}

    public getFirstTuple_result(socialite.rpc.TTuple success, TQueryError err) {
      this();
      this.success = success;
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getFirstTuple_result(getFirstTuple_result other) {
      if (other.isSetSuccess()) {
        this.success = new socialite.rpc.TTuple(other.success);
      }
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public getFirstTuple_result deepCopy() {
      return new getFirstTuple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public socialite.rpc.TTuple getSuccess() {
      return this.success;
    }

    public getFirstTuple_result setSuccess(socialite.rpc.TTuple success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TQueryError getErr() {
      return this.err;
    }

    public getFirstTuple_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((socialite.rpc.TTuple) value);
          }
          break;

        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getFirstTuple_result) return this.equals((getFirstTuple_result) that);
      return false;
    }

    public boolean equals(getFirstTuple_result that) {
      if (that == null) return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success) list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFirstTuple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstTuple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstTuple_resultStandardSchemeFactory implements SchemeFactory {
      public getFirstTuple_resultStandardScheme getScheme() {
        return new getFirstTuple_resultStandardScheme();
      }
    }

    private static class getFirstTuple_resultStandardScheme
        extends StandardScheme<getFirstTuple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstTuple_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new socialite.rpc.TTuple();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstTuple_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getFirstTuple_resultTupleSchemeFactory implements SchemeFactory {
      public getFirstTuple_resultTupleScheme getScheme() {
        return new getFirstTuple_resultTupleScheme();
      }
    }

    private static class getFirstTuple_resultTupleScheme extends TupleScheme<getFirstTuple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstTuple_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstTuple_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new socialite.rpc.TTuple();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class clear_args
      implements org.apache.thrift.TBase<clear_args, clear_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<clear_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("clear_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "table", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new clear_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clear_argsTupleSchemeFactory());
    }

    public String table; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short) 1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.TABLE,
          new org.apache.thrift.meta_data.FieldMetaData(
              "table",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clear_args.class, metaDataMap);
    }

    public clear_args() {}

    public clear_args(String table) {
      this();
      this.table = table;
    }

    /** Performs a deep copy on <i>other</i>. */
    public clear_args(clear_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public clear_args deepCopy() {
      return new clear_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    public String getTable() {
      return this.table;
    }

    public clear_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TABLE:
          if (value == null) {
            unsetTable();
          } else {
            setTable((String) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TABLE:
          return getTable();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case TABLE:
          return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof clear_args) return this.equals((clear_args) that);
      return false;
    }

    public boolean equals(clear_args that) {
      if (that == null) return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table)) return false;
        if (!this.table.equals(that.table)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table) list.add(table);

      return list.hashCode();
    }

    @Override
    public int compareTo(clear_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clear_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clear_argsStandardSchemeFactory implements SchemeFactory {
      public clear_argsStandardScheme getScheme() {
        return new clear_argsStandardScheme();
      }
    }

    private static class clear_argsStandardScheme extends StandardScheme<clear_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clear_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clear_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class clear_argsTupleSchemeFactory implements SchemeFactory {
      public clear_argsTupleScheme getScheme() {
        return new clear_argsTupleScheme();
      }
    }

    private static class clear_argsTupleScheme extends TupleScheme<clear_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clear_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clear_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }
  }

  public static class clear_result
      implements org.apache.thrift.TBase<clear_result, clear_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<clear_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("clear_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new clear_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clear_resultTupleSchemeFactory());
    }

    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          clear_result.class, metaDataMap);
    }

    public clear_result() {}

    public clear_result(TQueryError err) {
      this();
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public clear_result(clear_result other) {
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public clear_result deepCopy() {
      return new clear_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public TQueryError getErr() {
      return this.err;
    }

    public clear_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof clear_result) return this.equals((clear_result) that);
      return false;
    }

    public boolean equals(clear_result that) {
      if (that == null) return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(clear_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clear_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clear_resultStandardSchemeFactory implements SchemeFactory {
      public clear_resultStandardScheme getScheme() {
        return new clear_resultStandardScheme();
      }
    }

    private static class clear_resultStandardScheme extends StandardScheme<clear_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clear_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clear_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class clear_resultTupleSchemeFactory implements SchemeFactory {
      public clear_resultTupleScheme getScheme() {
        return new clear_resultTupleScheme();
      }
    }

    private static class clear_resultTupleScheme extends TupleScheme<clear_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clear_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clear_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class drop_args
      implements org.apache.thrift.TBase<drop_args, drop_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<drop_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("drop_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "table", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new drop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drop_argsTupleSchemeFactory());
    }

    public String table; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short) 1, "table");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.TABLE,
          new org.apache.thrift.meta_data.FieldMetaData(
              "table",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_args.class, metaDataMap);
    }

    public drop_args() {}

    public drop_args(String table) {
      this();
      this.table = table;
    }

    /** Performs a deep copy on <i>other</i>. */
    public drop_args(drop_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public drop_args deepCopy() {
      return new drop_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    public String getTable() {
      return this.table;
    }

    public drop_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TABLE:
          if (value == null) {
            unsetTable();
          } else {
            setTable((String) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TABLE:
          return getTable();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case TABLE:
          return isSetTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof drop_args) return this.equals((drop_args) that);
      return false;
    }

    public boolean equals(drop_args that) {
      if (that == null) return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table)) return false;
        if (!this.table.equals(that.table)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_table = true && (isSetTable());
      list.add(present_table);
      if (present_table) list.add(table);

      return list.hashCode();
    }

    @Override
    public int compareTo(drop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_argsStandardSchemeFactory implements SchemeFactory {
      public drop_argsStandardScheme getScheme() {
        return new drop_argsStandardScheme();
      }
    }

    private static class drop_argsStandardScheme extends StandardScheme<drop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class drop_argsTupleSchemeFactory implements SchemeFactory {
      public drop_argsTupleScheme getScheme() {
        return new drop_argsTupleScheme();
      }
    }

    private static class drop_argsTupleScheme extends TupleScheme<drop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }
  }

  public static class drop_result
      implements org.apache.thrift.TBase<drop_result, drop_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<drop_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("drop_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new drop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drop_resultTupleSchemeFactory());
    }

    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          drop_result.class, metaDataMap);
    }

    public drop_result() {}

    public drop_result(TQueryError err) {
      this();
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public drop_result(drop_result other) {
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public drop_result deepCopy() {
      return new drop_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public TQueryError getErr() {
      return this.err;
    }

    public drop_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof drop_result) return this.equals((drop_result) that);
      return false;
    }

    public boolean equals(drop_result that) {
      if (that == null) return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(drop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class drop_resultStandardSchemeFactory implements SchemeFactory {
      public drop_resultStandardScheme getScheme() {
        return new drop_resultStandardScheme();
      }
    }

    private static class drop_resultStandardScheme extends StandardScheme<drop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, drop_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, drop_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class drop_resultTupleSchemeFactory implements SchemeFactory {
      public drop_resultTupleScheme getScheme() {
        return new drop_resultTupleScheme();
      }
    }

    private static class drop_resultTupleScheme extends TupleScheme<drop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drop_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drop_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class getEnumKey_args
      implements org.apache.thrift.TBase<getEnumKey_args, getEnumKey_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumKey_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumKey_args");

    private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "kind", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "id", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumKey_argsTupleSchemeFactory());
    }

    public String kind; // required
    public int id; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KIND((short) 1, "kind"),
      ID((short) 2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // KIND
            return KIND;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.KIND,
          new org.apache.thrift.meta_data.FieldMetaData(
              "kind",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(
          _Fields.ID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "id",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumKey_args.class, metaDataMap);
    }

    public getEnumKey_args() {}

    public getEnumKey_args(String kind, int id) {
      this();
      this.kind = kind;
      this.id = id;
      setIdIsSet(true);
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumKey_args(getEnumKey_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKind()) {
        this.kind = other.kind;
      }
      this.id = other.id;
    }

    public getEnumKey_args deepCopy() {
      return new getEnumKey_args(this);
    }

    @Override
    public void clear() {
      this.kind = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public String getKind() {
      return this.kind;
    }

    public getEnumKey_args setKind(String kind) {
      this.kind = kind;
      return this;
    }

    public void unsetKind() {
      this.kind = null;
    }

    /** Returns true if field kind is set (has been assigned a value) and false otherwise */
    public boolean isSetKind() {
      return this.kind != null;
    }

    public void setKindIsSet(boolean value) {
      if (!value) {
        this.kind = null;
      }
    }

    public int getId() {
      return this.id;
    }

    public getEnumKey_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case KIND:
          if (value == null) {
            unsetKind();
          } else {
            setKind((String) value);
          }
          break;

        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((Integer) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case KIND:
          return getKind();

        case ID:
          return getId();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case KIND:
          return isSetKind();
        case ID:
          return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumKey_args) return this.equals((getEnumKey_args) that);
      return false;
    }

    public boolean equals(getEnumKey_args that) {
      if (that == null) return false;

      boolean this_present_kind = true && this.isSetKind();
      boolean that_present_kind = true && that.isSetKind();
      if (this_present_kind || that_present_kind) {
        if (!(this_present_kind && that_present_kind)) return false;
        if (!this.kind.equals(that.kind)) return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id)) return false;
        if (this.id != that.id) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_kind = true && (isSetKind());
      list.add(present_kind);
      if (present_kind) list.add(kind);

      boolean present_id = true;
      list.add(present_id);
      if (present_id) list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumKey_args(");
      boolean first = true;

      sb.append("kind:");
      if (this.kind == null) {
        sb.append("null");
      } else {
        sb.append(this.kind);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumKey_argsStandardSchemeFactory implements SchemeFactory {
      public getEnumKey_argsStandardScheme getScheme() {
        return new getEnumKey_argsStandardScheme();
      }
    }

    private static class getEnumKey_argsStandardScheme extends StandardScheme<getEnumKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumKey_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // KIND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.kind = iprot.readString();
                struct.setKindIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumKey_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kind != null) {
          oprot.writeFieldBegin(KIND_FIELD_DESC);
          oprot.writeString(struct.kind);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumKey_argsTupleSchemeFactory implements SchemeFactory {
      public getEnumKey_argsTupleScheme getScheme() {
        return new getEnumKey_argsTupleScheme();
      }
    }

    private static class getEnumKey_argsTupleScheme extends TupleScheme<getEnumKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumKey_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKind()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKind()) {
          oprot.writeString(struct.kind);
        }
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumKey_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.kind = iprot.readString();
          struct.setKindIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }
  }

  public static class getEnumKey_result
      implements org.apache.thrift.TBase<getEnumKey_result, getEnumKey_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumKey_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumKey_resultTupleSchemeFactory());
    }

    public String success; // required
    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"),
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumKey_result.class, metaDataMap);
    }

    public getEnumKey_result() {}

    public getEnumKey_result(String success, TQueryError err) {
      this();
      this.success = success;
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumKey_result(getEnumKey_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public getEnumKey_result deepCopy() {
      return new getEnumKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getEnumKey_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TQueryError getErr() {
      return this.err;
    }

    public getEnumKey_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;

        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumKey_result) return this.equals((getEnumKey_result) that);
      return false;
    }

    public boolean equals(getEnumKey_result that) {
      if (that == null) return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success) list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumKey_resultStandardSchemeFactory implements SchemeFactory {
      public getEnumKey_resultStandardScheme getScheme() {
        return new getEnumKey_resultStandardScheme();
      }
    }

    private static class getEnumKey_resultStandardScheme extends StandardScheme<getEnumKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumKey_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumKey_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumKey_resultTupleSchemeFactory implements SchemeFactory {
      public getEnumKey_resultTupleScheme getScheme() {
        return new getEnumKey_resultTupleScheme();
      }
    }

    private static class getEnumKey_resultTupleScheme extends TupleScheme<getEnumKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumKey_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumKey_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class getEnumId_args
      implements org.apache.thrift.TBase<getEnumId_args, getEnumId_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumId_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumId_args");

    private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "kind", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "key", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumId_argsTupleSchemeFactory());
    }

    public String kind; // required
    public String key; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KIND((short) 1, "kind"),
      KEY((short) 2, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // KIND
            return KIND;
          case 2: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.KIND,
          new org.apache.thrift.meta_data.FieldMetaData(
              "kind",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(
          _Fields.KEY,
          new org.apache.thrift.meta_data.FieldMetaData(
              "key",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumId_args.class, metaDataMap);
    }

    public getEnumId_args() {}

    public getEnumId_args(String kind, String key) {
      this();
      this.kind = kind;
      this.key = key;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumId_args(getEnumId_args other) {
      if (other.isSetKind()) {
        this.kind = other.kind;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getEnumId_args deepCopy() {
      return new getEnumId_args(this);
    }

    @Override
    public void clear() {
      this.kind = null;
      this.key = null;
    }

    public String getKind() {
      return this.kind;
    }

    public getEnumId_args setKind(String kind) {
      this.kind = kind;
      return this;
    }

    public void unsetKind() {
      this.kind = null;
    }

    /** Returns true if field kind is set (has been assigned a value) and false otherwise */
    public boolean isSetKind() {
      return this.kind != null;
    }

    public void setKindIsSet(boolean value) {
      if (!value) {
        this.kind = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getEnumId_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case KIND:
          if (value == null) {
            unsetKind();
          } else {
            setKind((String) value);
          }
          break;

        case KEY:
          if (value == null) {
            unsetKey();
          } else {
            setKey((String) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case KIND:
          return getKind();

        case KEY:
          return getKey();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case KIND:
          return isSetKind();
        case KEY:
          return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumId_args) return this.equals((getEnumId_args) that);
      return false;
    }

    public boolean equals(getEnumId_args that) {
      if (that == null) return false;

      boolean this_present_kind = true && this.isSetKind();
      boolean that_present_kind = true && that.isSetKind();
      if (this_present_kind || that_present_kind) {
        if (!(this_present_kind && that_present_kind)) return false;
        if (!this.kind.equals(that.kind)) return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key)) return false;
        if (!this.key.equals(that.key)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_kind = true && (isSetKind());
      list.add(present_kind);
      if (present_kind) list.add(kind);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key) list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumId_args(");
      boolean first = true;

      sb.append("kind:");
      if (this.kind == null) {
        sb.append("null");
      } else {
        sb.append(this.kind);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumId_argsStandardSchemeFactory implements SchemeFactory {
      public getEnumId_argsStandardScheme getScheme() {
        return new getEnumId_argsStandardScheme();
      }
    }

    private static class getEnumId_argsStandardScheme extends StandardScheme<getEnumId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumId_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // KIND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.kind = iprot.readString();
                struct.setKindIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumId_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kind != null) {
          oprot.writeFieldBegin(KIND_FIELD_DESC);
          oprot.writeString(struct.kind);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumId_argsTupleSchemeFactory implements SchemeFactory {
      public getEnumId_argsTupleScheme getScheme() {
        return new getEnumId_argsTupleScheme();
      }
    }

    private static class getEnumId_argsTupleScheme extends TupleScheme<getEnumId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumId_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKind()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKind()) {
          oprot.writeString(struct.kind);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumId_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.kind = iprot.readString();
          struct.setKindIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }
  }

  public static class getEnumId_result
      implements org.apache.thrift.TBase<getEnumId_result, getEnumId_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumId_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.I32, (short) 0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumId_resultTupleSchemeFactory());
    }

    public int success; // required
    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"),
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumId_result.class, metaDataMap);
    }

    public getEnumId_result() {}

    public getEnumId_result(int success, TQueryError err) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumId_result(getEnumId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public getEnumId_result deepCopy() {
      return new getEnumId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getEnumId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public TQueryError getErr() {
      return this.err;
    }

    public getEnumId_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Integer) value);
          }
          break;

        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumId_result) return this.equals((getEnumId_result) that);
      return false;
    }

    public boolean equals(getEnumId_result that) {
      if (that == null) return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (this.success != that.success) return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success) list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumId_resultStandardSchemeFactory implements SchemeFactory {
      public getEnumId_resultStandardScheme getScheme() {
        return new getEnumId_resultStandardScheme();
      }
    }

    private static class getEnumId_resultStandardScheme extends StandardScheme<getEnumId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumId_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumId_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumId_resultTupleSchemeFactory implements SchemeFactory {
      public getEnumId_resultTupleScheme getScheme() {
        return new getEnumId_resultTupleScheme();
      }
    }

    private static class getEnumId_resultTupleScheme extends TupleScheme<getEnumId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumId_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumId_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }

  public static class getEnumKeyList_args
      implements org.apache.thrift.TBase<getEnumKeyList_args, getEnumKeyList_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumKeyList_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumKeyList_args");

    private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "kind", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumKeyList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumKeyList_argsTupleSchemeFactory());
    }

    public String kind; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KIND((short) 1, "kind");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // KIND
            return KIND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.KIND,
          new org.apache.thrift.meta_data.FieldMetaData(
              "kind",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumKeyList_args.class, metaDataMap);
    }

    public getEnumKeyList_args() {}

    public getEnumKeyList_args(String kind) {
      this();
      this.kind = kind;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumKeyList_args(getEnumKeyList_args other) {
      if (other.isSetKind()) {
        this.kind = other.kind;
      }
    }

    public getEnumKeyList_args deepCopy() {
      return new getEnumKeyList_args(this);
    }

    @Override
    public void clear() {
      this.kind = null;
    }

    public String getKind() {
      return this.kind;
    }

    public getEnumKeyList_args setKind(String kind) {
      this.kind = kind;
      return this;
    }

    public void unsetKind() {
      this.kind = null;
    }

    /** Returns true if field kind is set (has been assigned a value) and false otherwise */
    public boolean isSetKind() {
      return this.kind != null;
    }

    public void setKindIsSet(boolean value) {
      if (!value) {
        this.kind = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case KIND:
          if (value == null) {
            unsetKind();
          } else {
            setKind((String) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case KIND:
          return getKind();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case KIND:
          return isSetKind();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumKeyList_args) return this.equals((getEnumKeyList_args) that);
      return false;
    }

    public boolean equals(getEnumKeyList_args that) {
      if (that == null) return false;

      boolean this_present_kind = true && this.isSetKind();
      boolean that_present_kind = true && that.isSetKind();
      if (this_present_kind || that_present_kind) {
        if (!(this_present_kind && that_present_kind)) return false;
        if (!this.kind.equals(that.kind)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_kind = true && (isSetKind());
      list.add(present_kind);
      if (present_kind) list.add(kind);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumKeyList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumKeyList_args(");
      boolean first = true;

      sb.append("kind:");
      if (this.kind == null) {
        sb.append("null");
      } else {
        sb.append(this.kind);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumKeyList_argsStandardSchemeFactory implements SchemeFactory {
      public getEnumKeyList_argsStandardScheme getScheme() {
        return new getEnumKeyList_argsStandardScheme();
      }
    }

    private static class getEnumKeyList_argsStandardScheme
        extends StandardScheme<getEnumKeyList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumKeyList_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // KIND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.kind = iprot.readString();
                struct.setKindIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumKeyList_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kind != null) {
          oprot.writeFieldBegin(KIND_FIELD_DESC);
          oprot.writeString(struct.kind);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumKeyList_argsTupleSchemeFactory implements SchemeFactory {
      public getEnumKeyList_argsTupleScheme getScheme() {
        return new getEnumKeyList_argsTupleScheme();
      }
    }

    private static class getEnumKeyList_argsTupleScheme extends TupleScheme<getEnumKeyList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumKeyList_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKind()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKind()) {
          oprot.writeString(struct.kind);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumKeyList_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.kind = iprot.readString();
          struct.setKindIsSet(true);
        }
      }
    }
  }

  public static class getEnumKeyList_result
      implements org.apache.thrift.TBase<getEnumKeyList_result, getEnumKeyList_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<getEnumKeyList_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("getEnumKeyList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new getEnumKeyList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEnumKeyList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public TQueryError err; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success"),
      ERR((short) 1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData(
              "success",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(
                  org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(
                      org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(
          _Fields.ERR,
          new org.apache.thrift.meta_data.FieldMetaData(
              "err",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          getEnumKeyList_result.class, metaDataMap);
    }

    public getEnumKeyList_result() {}

    public getEnumKeyList_result(List<String> success, TQueryError err) {
      this();
      this.success = success;
      this.err = err;
    }

    /** Performs a deep copy on <i>other</i>. */
    public getEnumKeyList_result(getEnumKeyList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new TQueryError(other.err);
      }
    }

    public getEnumKeyList_result deepCopy() {
      return new getEnumKeyList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getEnumKeyList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TQueryError getErr() {
      return this.err;
    }

    public getEnumKeyList_result setErr(TQueryError err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((List<String>) value);
          }
          break;

        case ERR:
          if (value == null) {
            unsetErr();
          } else {
            setErr((TQueryError) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

        case ERR:
          return getErr();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case ERR:
          return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof getEnumKeyList_result) return this.equals((getEnumKeyList_result) that);
      return false;
    }

    public boolean equals(getEnumKeyList_result that) {
      if (that == null) return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) return false;
        if (!this.success.equals(that.success)) return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err)) return false;
        if (!this.err.equals(that.err)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success) list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err) list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEnumKeyList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEnumKeyList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEnumKeyList_resultStandardSchemeFactory implements SchemeFactory {
      public getEnumKeyList_resultStandardScheme getScheme() {
        return new getEnumKeyList_resultStandardScheme();
      }
    }

    private static class getEnumKeyList_resultStandardScheme
        extends StandardScheme<getEnumKeyList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEnumKeyList_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new TQueryError();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEnumKeyList_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success) {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class getEnumKeyList_resultTupleSchemeFactory implements SchemeFactory {
      public getEnumKeyList_resultTupleScheme getScheme() {
        return new getEnumKeyList_resultTupleScheme();
      }
    }

    private static class getEnumKeyList_resultTupleScheme
        extends TupleScheme<getEnumKeyList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEnumKeyList_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success) {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEnumKeyList_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 =
                new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new TQueryError();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }
  }
}
