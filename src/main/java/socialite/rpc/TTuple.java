/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package socialite.rpc;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-26")
public class TTuple
    implements org.apache.thrift.TBase<TTuple, TTuple._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TTuple> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TTuple");

  private static final org.apache.thrift.protocol.TField COL0_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "col0", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
  private static final org.apache.thrift.protocol.TField COL1_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "col1", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
  private static final org.apache.thrift.protocol.TField COL2_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "col2", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
  private static final org.apache.thrift.protocol.TField COL_VAL_MAP_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "colValMap", org.apache.thrift.protocol.TType.MAP, (short) 5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
      new HashMap<Class<? extends IScheme>, SchemeFactory>();

  static {
    schemes.put(StandardScheme.class, new TTupleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTupleTupleSchemeFactory());
  }

  public ScalarVal col0; // optional
  public ScalarVal col1; // optional
  public ScalarVal col2; // optional
  public Map<Short, ScalarVal> colValMap; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COL0((short) 1, "col0"),
    COL1((short) 2, "col1"),
    COL2((short) 3, "col2"),
    COL_VAL_MAP((short) 5, "colValMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // COL0
          return COL0;
        case 2: // COL1
          return COL1;
        case 3: // COL2
          return COL2;
        case 5: // COL_VAL_MAP
          return COL_VAL_MAP;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {
    _Fields.COL0, _Fields.COL1, _Fields.COL2, _Fields.COL_VAL_MAP
  };
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.COL0,
        new org.apache.thrift.meta_data.FieldMetaData(
            "col0",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, ScalarVal.class)));
    tmpMap.put(
        _Fields.COL1,
        new org.apache.thrift.meta_data.FieldMetaData(
            "col1",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, ScalarVal.class)));
    tmpMap.put(
        _Fields.COL2,
        new org.apache.thrift.meta_data.FieldMetaData(
            "col2",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.StructMetaData(
                org.apache.thrift.protocol.TType.STRUCT, ScalarVal.class)));
    tmpMap.put(
        _Fields.COL_VAL_MAP,
        new org.apache.thrift.meta_data.FieldMetaData(
            "colValMap",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I16),
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, ScalarVal.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTuple.class, metaDataMap);
  }

  public TTuple() {}

  /** Performs a deep copy on <i>other</i>. */
  public TTuple(TTuple other) {
    if (other.isSetCol0()) {
      this.col0 = new ScalarVal(other.col0);
    }
    if (other.isSetCol1()) {
      this.col1 = new ScalarVal(other.col1);
    }
    if (other.isSetCol2()) {
      this.col2 = new ScalarVal(other.col2);
    }
    if (other.isSetColValMap()) {
      Map<Short, ScalarVal> __this__colValMap =
          new HashMap<Short, ScalarVal>(other.colValMap.size());
      for (Map.Entry<Short, ScalarVal> other_element : other.colValMap.entrySet()) {

        Short other_element_key = other_element.getKey();
        ScalarVal other_element_value = other_element.getValue();

        Short __this__colValMap_copy_key = other_element_key;

        ScalarVal __this__colValMap_copy_value = new ScalarVal(other_element_value);

        __this__colValMap.put(__this__colValMap_copy_key, __this__colValMap_copy_value);
      }
      this.colValMap = __this__colValMap;
    }
  }

  public TTuple deepCopy() {
    return new TTuple(this);
  }

  @Override
  public void clear() {
    this.col0 = null;
    this.col1 = null;
    this.col2 = null;
    this.colValMap = null;
  }

  public ScalarVal getCol0() {
    return this.col0;
  }

  public TTuple setCol0(ScalarVal col0) {
    this.col0 = col0;
    return this;
  }

  public void unsetCol0() {
    this.col0 = null;
  }

  /** Returns true if field col0 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol0() {
    return this.col0 != null;
  }

  public void setCol0IsSet(boolean value) {
    if (!value) {
      this.col0 = null;
    }
  }

  public ScalarVal getCol1() {
    return this.col1;
  }

  public TTuple setCol1(ScalarVal col1) {
    this.col1 = col1;
    return this;
  }

  public void unsetCol1() {
    this.col1 = null;
  }

  /** Returns true if field col1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol1() {
    return this.col1 != null;
  }

  public void setCol1IsSet(boolean value) {
    if (!value) {
      this.col1 = null;
    }
  }

  public ScalarVal getCol2() {
    return this.col2;
  }

  public TTuple setCol2(ScalarVal col2) {
    this.col2 = col2;
    return this;
  }

  public void unsetCol2() {
    this.col2 = null;
  }

  /** Returns true if field col2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol2() {
    return this.col2 != null;
  }

  public void setCol2IsSet(boolean value) {
    if (!value) {
      this.col2 = null;
    }
  }

  public int getColValMapSize() {
    return (this.colValMap == null) ? 0 : this.colValMap.size();
  }

  public void putToColValMap(short key, ScalarVal val) {
    if (this.colValMap == null) {
      this.colValMap = new HashMap<Short, ScalarVal>();
    }
    this.colValMap.put(key, val);
  }

  public Map<Short, ScalarVal> getColValMap() {
    return this.colValMap;
  }

  public TTuple setColValMap(Map<Short, ScalarVal> colValMap) {
    this.colValMap = colValMap;
    return this;
  }

  public void unsetColValMap() {
    this.colValMap = null;
  }

  /** Returns true if field colValMap is set (has been assigned a value) and false otherwise */
  public boolean isSetColValMap() {
    return this.colValMap != null;
  }

  public void setColValMapIsSet(boolean value) {
    if (!value) {
      this.colValMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case COL0:
        if (value == null) {
          unsetCol0();
        } else {
          setCol0((ScalarVal) value);
        }
        break;

      case COL1:
        if (value == null) {
          unsetCol1();
        } else {
          setCol1((ScalarVal) value);
        }
        break;

      case COL2:
        if (value == null) {
          unsetCol2();
        } else {
          setCol2((ScalarVal) value);
        }
        break;

      case COL_VAL_MAP:
        if (value == null) {
          unsetColValMap();
        } else {
          setColValMap((Map<Short, ScalarVal>) value);
        }
        break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case COL0:
        return getCol0();

      case COL1:
        return getCol1();

      case COL2:
        return getCol2();

      case COL_VAL_MAP:
        return getColValMap();
    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case COL0:
        return isSetCol0();
      case COL1:
        return isSetCol1();
      case COL2:
        return isSetCol2();
      case COL_VAL_MAP:
        return isSetColValMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) return false;
    if (that instanceof TTuple) return this.equals((TTuple) that);
    return false;
  }

  public boolean equals(TTuple that) {
    if (that == null) return false;

    boolean this_present_col0 = true && this.isSetCol0();
    boolean that_present_col0 = true && that.isSetCol0();
    if (this_present_col0 || that_present_col0) {
      if (!(this_present_col0 && that_present_col0)) return false;
      if (!this.col0.equals(that.col0)) return false;
    }

    boolean this_present_col1 = true && this.isSetCol1();
    boolean that_present_col1 = true && that.isSetCol1();
    if (this_present_col1 || that_present_col1) {
      if (!(this_present_col1 && that_present_col1)) return false;
      if (!this.col1.equals(that.col1)) return false;
    }

    boolean this_present_col2 = true && this.isSetCol2();
    boolean that_present_col2 = true && that.isSetCol2();
    if (this_present_col2 || that_present_col2) {
      if (!(this_present_col2 && that_present_col2)) return false;
      if (!this.col2.equals(that.col2)) return false;
    }

    boolean this_present_colValMap = true && this.isSetColValMap();
    boolean that_present_colValMap = true && that.isSetColValMap();
    if (this_present_colValMap || that_present_colValMap) {
      if (!(this_present_colValMap && that_present_colValMap)) return false;
      if (!this.colValMap.equals(that.colValMap)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_col0 = true && (isSetCol0());
    list.add(present_col0);
    if (present_col0) list.add(col0);

    boolean present_col1 = true && (isSetCol1());
    list.add(present_col1);
    if (present_col1) list.add(col1);

    boolean present_col2 = true && (isSetCol2());
    list.add(present_col2);
    if (present_col2) list.add(col2);

    boolean present_colValMap = true && (isSetColValMap());
    list.add(present_colValMap);
    if (present_colValMap) list.add(colValMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCol0()).compareTo(other.isSetCol0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col0, other.col0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol1()).compareTo(other.isSetCol1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col1, other.col1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol2()).compareTo(other.isSetCol2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col2, other.col2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColValMap()).compareTo(other.isSetColValMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColValMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colValMap, other.colValMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTuple(");
    boolean first = true;

    if (isSetCol0()) {
      sb.append("col0:");
      if (this.col0 == null) {
        sb.append("null");
      } else {
        sb.append(this.col0);
      }
      first = false;
    }
    if (isSetCol1()) {
      if (!first) sb.append(", ");
      sb.append("col1:");
      if (this.col1 == null) {
        sb.append("null");
      } else {
        sb.append(this.col1);
      }
      first = false;
    }
    if (isSetCol2()) {
      if (!first) sb.append(", ");
      sb.append("col2:");
      if (this.col2 == null) {
        sb.append("null");
      } else {
        sb.append(this.col2);
      }
      first = false;
    }
    if (isSetColValMap()) {
      if (!first) sb.append(", ");
      sb.append("colValMap:");
      if (this.colValMap == null) {
        sb.append("null");
      } else {
        sb.append(this.colValMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (col0 != null) {
      col0.validate();
    }
    if (col1 != null) {
      col1.validate();
    }
    if (col2 != null) {
      col2.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTupleStandardSchemeFactory implements SchemeFactory {
    public TTupleStandardScheme getScheme() {
      return new TTupleStandardScheme();
    }
  }

  private static class TTupleStandardScheme extends StandardScheme<TTuple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTuple struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // COL0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.col0 = new ScalarVal();
              struct.col0.read(iprot);
              struct.setCol0IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.col1 = new ScalarVal();
              struct.col1.read(iprot);
              struct.setCol1IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.col2 = new ScalarVal();
              struct.col2.read(iprot);
              struct.setCol2IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COL_VAL_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.colValMap = new HashMap<Short, ScalarVal>(2 * _map0.size);
                short _key1;
                ScalarVal _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3) {
                  _key1 = iprot.readI16();
                  _val2 = new ScalarVal();
                  _val2.read(iprot);
                  struct.colValMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setColValMapIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTuple struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.col0 != null) {
        if (struct.isSetCol0()) {
          oprot.writeFieldBegin(COL0_FIELD_DESC);
          struct.col0.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.col1 != null) {
        if (struct.isSetCol1()) {
          oprot.writeFieldBegin(COL1_FIELD_DESC);
          struct.col1.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.col2 != null) {
        if (struct.isSetCol2()) {
          oprot.writeFieldBegin(COL2_FIELD_DESC);
          struct.col2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.colValMap != null) {
        if (struct.isSetColValMap()) {
          oprot.writeFieldBegin(COL_VAL_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(
                new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.I16,
                    org.apache.thrift.protocol.TType.STRUCT,
                    struct.colValMap.size()));
            for (Map.Entry<Short, ScalarVal> _iter4 : struct.colValMap.entrySet()) {
              oprot.writeI16(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TTupleTupleSchemeFactory implements SchemeFactory {
    public TTupleTupleScheme getScheme() {
      return new TTupleTupleScheme();
    }
  }

  private static class TTupleTupleScheme extends TupleScheme<TTuple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTuple struct)
        throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCol0()) {
        optionals.set(0);
      }
      if (struct.isSetCol1()) {
        optionals.set(1);
      }
      if (struct.isSetCol2()) {
        optionals.set(2);
      }
      if (struct.isSetColValMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCol0()) {
        struct.col0.write(oprot);
      }
      if (struct.isSetCol1()) {
        struct.col1.write(oprot);
      }
      if (struct.isSetCol2()) {
        struct.col2.write(oprot);
      }
      if (struct.isSetColValMap()) {
        {
          oprot.writeI32(struct.colValMap.size());
          for (Map.Entry<Short, ScalarVal> _iter5 : struct.colValMap.entrySet()) {
            oprot.writeI16(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTuple struct)
        throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.col0 = new ScalarVal();
        struct.col0.read(iprot);
        struct.setCol0IsSet(true);
      }
      if (incoming.get(1)) {
        struct.col1 = new ScalarVal();
        struct.col1.read(iprot);
        struct.setCol1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.col2 = new ScalarVal();
        struct.col2.read(iprot);
        struct.setCol2IsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map6 =
              new org.apache.thrift.protocol.TMap(
                  org.apache.thrift.protocol.TType.I16,
                  org.apache.thrift.protocol.TType.STRUCT,
                  iprot.readI32());
          struct.colValMap = new HashMap<Short, ScalarVal>(2 * _map6.size);
          short _key7;
          ScalarVal _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
            _key7 = iprot.readI16();
            _val8 = new ScalarVal();
            _val8.read(iprot);
            struct.colValMap.put(_key7, _val8);
          }
        }
        struct.setColValMapIsSet(true);
      }
    }
  }
}
