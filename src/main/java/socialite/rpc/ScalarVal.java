/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package socialite.rpc;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-26")
public class ScalarVal
    implements org.apache.thrift.TBase<ScalarVal, ScalarVal._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<ScalarVal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("ScalarVal");

  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC =
      new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I64, (short) 1);
  private static final org.apache.thrift.protocol.TField REAL_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "real", org.apache.thrift.protocol.TType.DOUBLE, (short) 2);
  private static final org.apache.thrift.protocol.TField STR_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "str", org.apache.thrift.protocol.TType.STRING, (short) 3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
      new HashMap<Class<? extends IScheme>, SchemeFactory>();

  static {
    schemes.put(StandardScheme.class, new ScalarValStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScalarValTupleSchemeFactory());
  }

  public long num; // optional
  public double real; // optional
  public String str; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM((short) 1, "num"),
    REAL((short) 2, "real"),
    STR((short) 3, "str");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // NUM
          return NUM;
        case 2: // REAL
          return REAL;
        case 3: // STR
          return STR;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ISSET_ID = 0;
  private static final int __REAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM, _Fields.REAL, _Fields.STR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.NUM,
        new org.apache.thrift.meta_data.FieldMetaData(
            "num",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(
        _Fields.REAL,
        new org.apache.thrift.meta_data.FieldMetaData(
            "real",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(
        _Fields.STR,
        new org.apache.thrift.meta_data.FieldMetaData(
            "str",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScalarVal.class, metaDataMap);
  }

  public ScalarVal() {}

  /** Performs a deep copy on <i>other</i>. */
  public ScalarVal(ScalarVal other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num = other.num;
    this.real = other.real;
    if (other.isSetStr()) {
      this.str = other.str;
    }
  }

  public ScalarVal deepCopy() {
    return new ScalarVal(this);
  }

  @Override
  public void clear() {
    setNumIsSet(false);
    this.num = 0;
    setRealIsSet(false);
    this.real = 0.0;
    this.str = null;
  }

  public long getNum() {
    return this.num;
  }

  public ScalarVal setNum(long num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public double getReal() {
    return this.real;
  }

  public ScalarVal setReal(double real) {
    this.real = real;
    setRealIsSet(true);
    return this;
  }

  public void unsetReal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REAL_ISSET_ID);
  }

  /** Returns true if field real is set (has been assigned a value) and false otherwise */
  public boolean isSetReal() {
    return EncodingUtils.testBit(__isset_bitfield, __REAL_ISSET_ID);
  }

  public void setRealIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REAL_ISSET_ID, value);
  }

  public String getStr() {
    return this.str;
  }

  public ScalarVal setStr(String str) {
    this.str = str;
    return this;
  }

  public void unsetStr() {
    this.str = null;
  }

  /** Returns true if field str is set (has been assigned a value) and false otherwise */
  public boolean isSetStr() {
    return this.str != null;
  }

  public void setStrIsSet(boolean value) {
    if (!value) {
      this.str = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Long) value);
        }
        break;

      case REAL:
        if (value == null) {
          unsetReal();
        } else {
          setReal((Double) value);
        }
        break;

      case STR:
        if (value == null) {
          unsetStr();
        } else {
          setStr((String) value);
        }
        break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case NUM:
        return getNum();

      case REAL:
        return getReal();

      case STR:
        return getStr();
    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case NUM:
        return isSetNum();
      case REAL:
        return isSetReal();
      case STR:
        return isSetStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) return false;
    if (that instanceof ScalarVal) return this.equals((ScalarVal) that);
    return false;
  }

  public boolean equals(ScalarVal that) {
    if (that == null) return false;

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num)) return false;
      if (this.num != that.num) return false;
    }

    boolean this_present_real = true && this.isSetReal();
    boolean that_present_real = true && that.isSetReal();
    if (this_present_real || that_present_real) {
      if (!(this_present_real && that_present_real)) return false;
      if (this.real != that.real) return false;
    }

    boolean this_present_str = true && this.isSetStr();
    boolean that_present_str = true && that.isSetStr();
    if (this_present_str || that_present_str) {
      if (!(this_present_str && that_present_str)) return false;
      if (!this.str.equals(that.str)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num = true && (isSetNum());
    list.add(present_num);
    if (present_num) list.add(num);

    boolean present_real = true && (isSetReal());
    list.add(present_real);
    if (present_real) list.add(real);

    boolean present_str = true && (isSetStr());
    list.add(present_str);
    if (present_str) list.add(str);

    return list.hashCode();
  }

  @Override
  public int compareTo(ScalarVal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReal()).compareTo(other.isSetReal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real, other.real);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScalarVal(");
    boolean first = true;

    if (isSetNum()) {
      sb.append("num:");
      sb.append(this.num);
      first = false;
    }
    if (isSetReal()) {
      if (!first) sb.append(", ");
      sb.append("real:");
      sb.append(this.real);
      first = false;
    }
    if (isSetStr()) {
      if (!first) sb.append(", ");
      sb.append("str:");
      if (this.str == null) {
        sb.append("null");
      } else {
        sb.append(this.str);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScalarValStandardSchemeFactory implements SchemeFactory {
    public ScalarValStandardScheme getScheme() {
      return new ScalarValStandardScheme();
    }
  }

  private static class ScalarValStandardScheme extends StandardScheme<ScalarVal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScalarVal struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num = iprot.readI64();
              struct.setNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.real = iprot.readDouble();
              struct.setRealIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str = iprot.readString();
              struct.setStrIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScalarVal struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNum()) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI64(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReal()) {
        oprot.writeFieldBegin(REAL_FIELD_DESC);
        oprot.writeDouble(struct.real);
        oprot.writeFieldEnd();
      }
      if (struct.str != null) {
        if (struct.isSetStr()) {
          oprot.writeFieldBegin(STR_FIELD_DESC);
          oprot.writeString(struct.str);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class ScalarValTupleSchemeFactory implements SchemeFactory {
    public ScalarValTupleScheme getScheme() {
      return new ScalarValTupleScheme();
    }
  }

  private static class ScalarValTupleScheme extends TupleScheme<ScalarVal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScalarVal struct)
        throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNum()) {
        optionals.set(0);
      }
      if (struct.isSetReal()) {
        optionals.set(1);
      }
      if (struct.isSetStr()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNum()) {
        oprot.writeI64(struct.num);
      }
      if (struct.isSetReal()) {
        oprot.writeDouble(struct.real);
      }
      if (struct.isSetStr()) {
        oprot.writeString(struct.str);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScalarVal struct)
        throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.num = iprot.readI64();
        struct.setNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.real = iprot.readDouble();
        struct.setRealIsSet(true);
      }
      if (incoming.get(2)) {
        struct.str = iprot.readString();
        struct.setStrIsSet(true);
      }
    }
  }
}
