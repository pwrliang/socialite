/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package socialite.rpc.queryCallback;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-26")
public class QueryCallbackService {

  public interface Iface {

    public void returnTuples(long queryid, TTupleList tupleList)
        throws org.apache.thrift.TException;
  }

  public interface AsyncIface {

    public void returnTuples(
        long queryid,
        TTupleList tupleList,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException;
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}

      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      public Client getClient(
          org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(
        org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void returnTuples(long queryid, TTupleList tupleList)
        throws org.apache.thrift.TException {
      send_returnTuples(queryid, tupleList);
      recv_returnTuples();
    }

    public void send_returnTuples(long queryid, TTupleList tupleList)
        throws org.apache.thrift.TException {
      returnTuples_args args = new returnTuples_args();
      args.setQueryid(queryid);
      args.setTupleList(tupleList);
      sendBase("returnTuples", args);
    }

    public void recv_returnTuples() throws org.apache.thrift.TException {
      returnTuples_result result = new returnTuples_result();
      receiveBase(result, "returnTuples");
      return;
    }
  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
      implements AsyncIface {
    public static class Factory
        implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(
          org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      public AsyncClient getAsyncClient(
          org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(
        org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void returnTuples(
        long queryid,
        TTupleList tupleList,
        org.apache.thrift.async.AsyncMethodCallback resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      returnTuples_call method_call =
          new returnTuples_call(
              queryid, tupleList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnTuples_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long queryid;
      private TTupleList tupleList;

      public returnTuples_call(
          long queryid,
          TTupleList tupleList,
          org.apache.thrift.async.AsyncMethodCallback resultHandler,
          org.apache.thrift.async.TAsyncClient client,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport)
          throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryid = queryid;
        this.tupleList = tupleList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot)
          throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage(
                "returnTuples", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnTuples_args args = new returnTuples_args();
        args.setQueryid(queryid);
        args.setTupleList(tupleList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
            new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot =
            client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_returnTuples();
      }
    }
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(
          iface,
          getProcessMap(
              new HashMap<
                  String,
                  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(
        I iface,
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface>
        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
            getProcessMap(
                Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
                    processMap) {
      processMap.put("returnTuples", new returnTuples());
      return processMap;
    }

    public static class returnTuples<I extends Iface>
        extends org.apache.thrift.ProcessFunction<I, returnTuples_args> {
      public returnTuples() {
        super("returnTuples");
      }

      public returnTuples_args getEmptyArgsInstance() {
        return new returnTuples_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnTuples_result getResult(I iface, returnTuples_args args)
          throws org.apache.thrift.TException {
        returnTuples_result result = new returnTuples_result();
        iface.returnTuples(args.queryid, args.tupleList);
        return result;
      }
    }
  }

  public static class AsyncProcessor<I extends AsyncIface>
      extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(
          iface,
          getProcessMap(
              new HashMap<
                  String,
                  org.apache.thrift.AsyncProcessFunction<
                      I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(
        I iface,
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface>
        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
            getProcessMap(
                Map<
                        String,
                        org.apache.thrift.AsyncProcessFunction<
                            I, ? extends org.apache.thrift.TBase, ?>>
                    processMap) {
      processMap.put("returnTuples", new returnTuples());
      return processMap;
    }

    public static class returnTuples<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, returnTuples_args, Void> {
      public returnTuples() {
        super("returnTuples");
      }

      public returnTuples_args getEmptyArgsInstance() {
        return new returnTuples_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(
          final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            returnTuples_result result = new returnTuples_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }

          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnTuples_result result = new returnTuples_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg =
                  (org.apache.thrift.TBase)
                      new org.apache.thrift.TApplicationException(
                          org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(
          I iface,
          returnTuples_args args,
          org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
          throws TException {
        iface.returnTuples(args.queryid, args.tupleList, resultHandler);
      }
    }
  }

  public static class returnTuples_args
      implements org.apache.thrift.TBase<returnTuples_args, returnTuples_args._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<returnTuples_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("returnTuples_args");

    private static final org.apache.thrift.protocol.TField QUERYID_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "queryid", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField TUPLE_LIST_FIELD_DESC =
        new org.apache.thrift.protocol.TField(
            "tupleList", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new returnTuples_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnTuples_argsTupleSchemeFactory());
    }

    public long queryid; // required
    public TTupleList tupleList; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERYID((short) 1, "queryid"),
      TUPLE_LIST((short) 2, "tupleList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // QUERYID
            return QUERYID;
          case 2: // TUPLE_LIST
            return TUPLE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUERYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(
          _Fields.QUERYID,
          new org.apache.thrift.meta_data.FieldMetaData(
              "queryid",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(
                  org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(
          _Fields.TUPLE_LIST,
          new org.apache.thrift.meta_data.FieldMetaData(
              "tupleList",
              org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(
                  org.apache.thrift.protocol.TType.STRUCT, TTupleList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          returnTuples_args.class, metaDataMap);
    }

    public returnTuples_args() {}

    public returnTuples_args(long queryid, TTupleList tupleList) {
      this();
      this.queryid = queryid;
      setQueryidIsSet(true);
      this.tupleList = tupleList;
    }

    /** Performs a deep copy on <i>other</i>. */
    public returnTuples_args(returnTuples_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.queryid = other.queryid;
      if (other.isSetTupleList()) {
        this.tupleList = new TTupleList(other.tupleList);
      }
    }

    public returnTuples_args deepCopy() {
      return new returnTuples_args(this);
    }

    @Override
    public void clear() {
      setQueryidIsSet(false);
      this.queryid = 0;
      this.tupleList = null;
    }

    public long getQueryid() {
      return this.queryid;
    }

    public returnTuples_args setQueryid(long queryid) {
      this.queryid = queryid;
      setQueryidIsSet(true);
      return this;
    }

    public void unsetQueryid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    /** Returns true if field queryid is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryid() {
      return EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    public void setQueryidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
    }

    public TTupleList getTupleList() {
      return this.tupleList;
    }

    public returnTuples_args setTupleList(TTupleList tupleList) {
      this.tupleList = tupleList;
      return this;
    }

    public void unsetTupleList() {
      this.tupleList = null;
    }

    /** Returns true if field tupleList is set (has been assigned a value) and false otherwise */
    public boolean isSetTupleList() {
      return this.tupleList != null;
    }

    public void setTupleListIsSet(boolean value) {
      if (!value) {
        this.tupleList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case QUERYID:
          if (value == null) {
            unsetQueryid();
          } else {
            setQueryid((Long) value);
          }
          break;

        case TUPLE_LIST:
          if (value == null) {
            unsetTupleList();
          } else {
            setTupleList((TTupleList) value);
          }
          break;
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case QUERYID:
          return getQueryid();

        case TUPLE_LIST:
          return getTupleList();
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case QUERYID:
          return isSetQueryid();
        case TUPLE_LIST:
          return isSetTupleList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof returnTuples_args) return this.equals((returnTuples_args) that);
      return false;
    }

    public boolean equals(returnTuples_args that) {
      if (that == null) return false;

      boolean this_present_queryid = true;
      boolean that_present_queryid = true;
      if (this_present_queryid || that_present_queryid) {
        if (!(this_present_queryid && that_present_queryid)) return false;
        if (this.queryid != that.queryid) return false;
      }

      boolean this_present_tupleList = true && this.isSetTupleList();
      boolean that_present_tupleList = true && that.isSetTupleList();
      if (this_present_tupleList || that_present_tupleList) {
        if (!(this_present_tupleList && that_present_tupleList)) return false;
        if (!this.tupleList.equals(that.tupleList)) return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_queryid = true;
      list.add(present_queryid);
      if (present_queryid) list.add(queryid);

      boolean present_tupleList = true && (isSetTupleList());
      list.add(present_tupleList);
      if (present_tupleList) list.add(tupleList);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnTuples_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQueryid()).compareTo(other.isSetQueryid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryid, other.queryid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTupleList()).compareTo(other.isSetTupleList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTupleList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tupleList, other.tupleList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnTuples_args(");
      boolean first = true;

      sb.append("queryid:");
      sb.append(this.queryid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tupleList:");
      if (this.tupleList == null) {
        sb.append("null");
      } else {
        sb.append(this.tupleList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tupleList != null) {
        tupleList.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and
        // doesn't call the default constructor.
        __isset_bitfield = 0;
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnTuples_argsStandardSchemeFactory implements SchemeFactory {
      public returnTuples_argsStandardScheme getScheme() {
        return new returnTuples_argsStandardScheme();
      }
    }

    private static class returnTuples_argsStandardScheme extends StandardScheme<returnTuples_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnTuples_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERYID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.queryid = iprot.readI64();
                struct.setQueryidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TUPLE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tupleList = new TTupleList();
                struct.tupleList.read(iprot);
                struct.setTupleListIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnTuples_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(QUERYID_FIELD_DESC);
        oprot.writeI64(struct.queryid);
        oprot.writeFieldEnd();
        if (struct.tupleList != null) {
          oprot.writeFieldBegin(TUPLE_LIST_FIELD_DESC);
          struct.tupleList.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class returnTuples_argsTupleSchemeFactory implements SchemeFactory {
      public returnTuples_argsTupleScheme getScheme() {
        return new returnTuples_argsTupleScheme();
      }
    }

    private static class returnTuples_argsTupleScheme extends TupleScheme<returnTuples_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnTuples_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryid()) {
          optionals.set(0);
        }
        if (struct.isSetTupleList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQueryid()) {
          oprot.writeI64(struct.queryid);
        }
        if (struct.isSetTupleList()) {
          struct.tupleList.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnTuples_args struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.queryid = iprot.readI64();
          struct.setQueryidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tupleList = new TTupleList();
          struct.tupleList.read(iprot);
          struct.setTupleListIsSet(true);
        }
      }
    }
  }

  public static class returnTuples_result
      implements org.apache.thrift.TBase<returnTuples_result, returnTuples_result._Fields>,
          java.io.Serializable,
          Cloneable,
          Comparable<returnTuples_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("returnTuples_result");

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
      schemes.put(StandardScheme.class, new returnTuples_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnTuples_resultTupleSchemeFactory());
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /** Find the _Fields constant that matches fieldId, or null if its not found. */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /** Find the _Fields constant that matches name, or null if its not found. */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
          new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
          returnTuples_result.class, metaDataMap);
    }

    public returnTuples_result() {}

    /** Performs a deep copy on <i>other</i>. */
    public returnTuples_result(returnTuples_result other) {}

    public returnTuples_result deepCopy() {
      return new returnTuples_result(this);
    }

    @Override
    public void clear() {}

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null) return false;
      if (that instanceof returnTuples_result) return this.equals((returnTuples_result) that);
      return false;
    }

    public boolean equals(returnTuples_result that) {
      if (that == null) return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnTuples_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot)
        throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnTuples_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException {
      try {
        read(
            new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnTuples_resultStandardSchemeFactory implements SchemeFactory {
      public returnTuples_resultStandardScheme getScheme() {
        return new returnTuples_resultStandardScheme();
      }
    }

    private static class returnTuples_resultStandardScheme
        extends StandardScheme<returnTuples_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnTuples_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate
        // method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnTuples_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }

    private static class returnTuples_resultTupleSchemeFactory implements SchemeFactory {
      public returnTuples_resultTupleScheme getScheme() {
        return new returnTuples_resultTupleScheme();
      }
    }

    private static class returnTuples_resultTupleScheme extends TupleScheme<returnTuples_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnTuples_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnTuples_result struct)
          throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }
  }
}
