/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package socialite.rpc.queryCallback;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-26")
public class TTupleList
    implements org.apache.thrift.TBase<TTupleList, TTupleList._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<TTupleList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("TTupleList");

  private static final org.apache.thrift.protocol.TField TUPLE_LIST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "tupleList", org.apache.thrift.protocol.TType.LIST, (short) 1);
  private static final org.apache.thrift.protocol.TField LAST_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "last", org.apache.thrift.protocol.TType.BOOL, (short) 2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
      new HashMap<Class<? extends IScheme>, SchemeFactory>();

  static {
    schemes.put(StandardScheme.class, new TTupleListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTupleListTupleSchemeFactory());
  }

  public List<socialite.rpc.TTuple> tupleList; // required
  public boolean last; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_LIST((short) 1, "tupleList"),
    LAST((short) 2, "last");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // TUPLE_LIST
          return TUPLE_LIST;
        case 2: // LAST
          return LAST;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.TUPLE_LIST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "tupleList",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, socialite.rpc.TTuple.class))));
    tmpMap.put(
        _Fields.LAST,
        new org.apache.thrift.meta_data.FieldMetaData(
            "last",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTupleList.class, metaDataMap);
  }

  public TTupleList() {}

  public TTupleList(List<socialite.rpc.TTuple> tupleList, boolean last) {
    this();
    this.tupleList = tupleList;
    this.last = last;
    setLastIsSet(true);
  }

  /** Performs a deep copy on <i>other</i>. */
  public TTupleList(TTupleList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTupleList()) {
      List<socialite.rpc.TTuple> __this__tupleList =
          new ArrayList<socialite.rpc.TTuple>(other.tupleList.size());
      for (socialite.rpc.TTuple other_element : other.tupleList) {
        __this__tupleList.add(new socialite.rpc.TTuple(other_element));
      }
      this.tupleList = __this__tupleList;
    }
    this.last = other.last;
  }

  public TTupleList deepCopy() {
    return new TTupleList(this);
  }

  @Override
  public void clear() {
    this.tupleList = null;
    setLastIsSet(false);
    this.last = false;
  }

  public int getTupleListSize() {
    return (this.tupleList == null) ? 0 : this.tupleList.size();
  }

  public java.util.Iterator<socialite.rpc.TTuple> getTupleListIterator() {
    return (this.tupleList == null) ? null : this.tupleList.iterator();
  }

  public void addToTupleList(socialite.rpc.TTuple elem) {
    if (this.tupleList == null) {
      this.tupleList = new ArrayList<socialite.rpc.TTuple>();
    }
    this.tupleList.add(elem);
  }

  public List<socialite.rpc.TTuple> getTupleList() {
    return this.tupleList;
  }

  public TTupleList setTupleList(List<socialite.rpc.TTuple> tupleList) {
    this.tupleList = tupleList;
    return this;
  }

  public void unsetTupleList() {
    this.tupleList = null;
  }

  /** Returns true if field tupleList is set (has been assigned a value) and false otherwise */
  public boolean isSetTupleList() {
    return this.tupleList != null;
  }

  public void setTupleListIsSet(boolean value) {
    if (!value) {
      this.tupleList = null;
    }
  }

  public boolean isLast() {
    return this.last;
  }

  public TTupleList setLast(boolean last) {
    this.last = last;
    setLastIsSet(true);
    return this;
  }

  public void unsetLast() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAST_ISSET_ID);
  }

  /** Returns true if field last is set (has been assigned a value) and false otherwise */
  public boolean isSetLast() {
    return EncodingUtils.testBit(__isset_bitfield, __LAST_ISSET_ID);
  }

  public void setLastIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case TUPLE_LIST:
        if (value == null) {
          unsetTupleList();
        } else {
          setTupleList((List<socialite.rpc.TTuple>) value);
        }
        break;

      case LAST:
        if (value == null) {
          unsetLast();
        } else {
          setLast((Boolean) value);
        }
        break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case TUPLE_LIST:
        return getTupleList();

      case LAST:
        return isLast();
    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case TUPLE_LIST:
        return isSetTupleList();
      case LAST:
        return isSetLast();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) return false;
    if (that instanceof TTupleList) return this.equals((TTupleList) that);
    return false;
  }

  public boolean equals(TTupleList that) {
    if (that == null) return false;

    boolean this_present_tupleList = true && this.isSetTupleList();
    boolean that_present_tupleList = true && that.isSetTupleList();
    if (this_present_tupleList || that_present_tupleList) {
      if (!(this_present_tupleList && that_present_tupleList)) return false;
      if (!this.tupleList.equals(that.tupleList)) return false;
    }

    boolean this_present_last = true;
    boolean that_present_last = true;
    if (this_present_last || that_present_last) {
      if (!(this_present_last && that_present_last)) return false;
      if (this.last != that.last) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tupleList = true && (isSetTupleList());
    list.add(present_tupleList);
    if (present_tupleList) list.add(tupleList);

    boolean present_last = true;
    list.add(present_last);
    if (present_last) list.add(last);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTupleList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTupleList()).compareTo(other.isSetTupleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTupleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tupleList, other.tupleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast()).compareTo(other.isSetLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last, other.last);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTupleList(");
    boolean first = true;

    sb.append("tupleList:");
    if (this.tupleList == null) {
      sb.append("null");
    } else {
      sb.append(this.tupleList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last:");
    sb.append(this.last);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and
      // doesn't call the default constructor.
      __isset_bitfield = 0;
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTupleListStandardSchemeFactory implements SchemeFactory {
    public TTupleListStandardScheme getScheme() {
      return new TTupleListStandardScheme();
    }
  }

  private static class TTupleListStandardScheme extends StandardScheme<TTupleList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTupleList struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tupleList = new ArrayList<socialite.rpc.TTuple>(_list0.size);
                socialite.rpc.TTuple _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                  _elem1 = new socialite.rpc.TTuple();
                  _elem1.read(iprot);
                  struct.tupleList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTupleListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.last = iprot.readBool();
              struct.setLastIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTupleList struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tupleList != null) {
        oprot.writeFieldBegin(TUPLE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(
              new org.apache.thrift.protocol.TList(
                  org.apache.thrift.protocol.TType.STRUCT, struct.tupleList.size()));
          for (socialite.rpc.TTuple _iter3 : struct.tupleList) {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_FIELD_DESC);
      oprot.writeBool(struct.last);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class TTupleListTupleSchemeFactory implements SchemeFactory {
    public TTupleListTupleScheme getScheme() {
      return new TTupleListTupleScheme();
    }
  }

  private static class TTupleListTupleScheme extends TupleScheme<TTupleList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTupleList struct)
        throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTupleList()) {
        optionals.set(0);
      }
      if (struct.isSetLast()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTupleList()) {
        {
          oprot.writeI32(struct.tupleList.size());
          for (socialite.rpc.TTuple _iter4 : struct.tupleList) {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetLast()) {
        oprot.writeBool(struct.last);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTupleList struct)
        throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 =
              new org.apache.thrift.protocol.TList(
                  org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tupleList = new ArrayList<socialite.rpc.TTuple>(_list5.size);
          socialite.rpc.TTuple _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
            _elem6 = new socialite.rpc.TTuple();
            _elem6.read(iprot);
            struct.tupleList.add(_elem6);
          }
        }
        struct.setTupleListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.last = iprot.readBool();
        struct.setLastIsSet(true);
      }
    }
  }
}
